{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","name","uv","pv","amt","techniques","currentService","handleCharacteristicValueChanged","event","console","log","target","value","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputParameterChange","e","state","runningTest","alert","setState","defineProperty","runTest","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","then","device","gatt","connect","server","getPrimaryService","service","getCharacteristics","characteristics","forEach","characteristic","uuid","getCharacteristic","startNotifications","addEventListener","writeValue","Uint8Array","of","frequency","startVoltage","stopVoltage","increment","range","dataRate","_","catch","error","height","weSelected","_this2","react_default","a","createElement","className","dist_default","options","onChange","_onSelect","type","onClick","LineChart","width","margin","top","right","left","bottom","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","Legend","Line","stroke","activeDot","r","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e2c6bec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\nconst data = [\n      {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n      {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n      {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n      {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n      {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n      {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n      {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n];\n\nlet techniques = [ 'Square Wave', 'Sine Wave']\n\nlet currentService = null;\nlet currentDevice  = null;\n\nlet handleCharacteristicValueChanged = (event) => {\n  console.log(event.target.value);\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      runningTest: false,\n      frequency: 400,\n      startVoltage: -300,\n      stopVoltage: 200,\n      height: 50,\n      increment: 1,\n      range: 5,\n      dataRate: 7,\n      weSelected: 0\n    }\n  }\n  \n  handleInputParameterChange = (e) => {\n    if (!this.state.runningTest) {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    } else {\n      alert(\"Input parameters can not be changed while a test is running\");\n    }\n  }\n\n\n  runTest = () => {\n      console.log(\"Starting program...\")\n      navigator.bluetooth.requestDevice({acceptAllDevices: true,optionalServices: ['16d30bc1-f148-49bd-b127-8042df63ded0']})\n        .then(device => {\n          // Human-readable name of the device.\n          console.log(\"connected to: \" + device.name);\n          currentDevice = device;\n          console.log(device.gatt.connect());\n          // Attempts to connect to remote GATT Server.\n          return device.gatt.connect();\n        })\n        .then(server => {\n          console.log(server);\n         return server.getPrimaryService('16d30bc1-f148-49bd-b127-8042df63ded0');\n        })\n        .then(service => {\n          currentService = service;\n          console.log(\"Connected to service..\");\n          service.getCharacteristics().then(characteristics => {\n            characteristics.forEach(characteristic => {\n              console.log('Found Characteristic: ' + characteristic.uuid );\n            });\n          });\n          return service.getCharacteristic('16d30bc9-f148-49bd-b127-8042df63ded0');\n        })\n        .then(characteristic => characteristic.startNotifications())\n        .then(characteristic => {\n          characteristic.addEventListener('characteristicvaluechanged',\n                                          handleCharacteristicValueChanged);\n          console.log(\"Started listening to notifications on data characteristic...\")\n          return currentService;\n        })\n        .then(service => {\n          // Write to BLE_UUID_ZIO_FREQ_CHAR \n          return currentService.getCharacteristic('16d30bc2-f148-49bd-b127-8042df63ded0')\n        })\n        .then(characteristic => {\n          return characteristic.writeValue(Uint8Array.of(this.state.frequency));\n        })\n        .then(service => {\n          // Write to BLE_UUID_ZIO_START_VOLT_CHAR \n          return currentService.getCharacteristic('16d30bc3-f148-49bd-b127-8042df63ded0')\n        })\n        .then(characteristic => {\n          return characteristic.writeValue(Uint8Array.of(this.state.startVoltage));\n        })\n        .then(service => {\n          // Write to BLE_UUID_ZIO_STOP_VOLT_CHAR \n          return currentService.getCharacteristic('16d30bc4-f148-49bd-b127-8042df63ded0')\n        })\n        .then(characteristic => {\n          return characteristic.writeValue(Uint8Array.of(this.state.stopVoltage));\n        })\n        .then(service => {\n          // Write to BLE_UUID_ZIO_INC_CHAR \n          return currentService.getCharacteristic('16d30bc6-f148-49bd-b127-8042df63ded0')\n        })\n        .then(characteristic => {\n          return characteristic.writeValue(Uint8Array.of(this.state.increment));\n        })\n        .then(service => {\n          // Write to BLE_UUID_ZIO_RANGE_CHAR \n          return currentService.getCharacteristic('16d30bc7-f148-49bd-b127-8042df63ded0')\n        })\n        .then(characteristic => {\n          return characteristic.writeValue(Uint8Array.of(this.state.range));\n        })\n        .then(service => {\n          // Write to BLE_UUID_ZIO_DATA_RATE_CHAR \n          return currentService.getCharacteristic('16d30bca-f148-49bd-b127-8042df63ded0')\n        })\n        .then(characteristic => {\n          return characteristic.writeValue(Uint8Array.of(this.state.dataRate));\n        })\n        .then(service => {\n          return currentService.getCharacteristic('16d30bc8-f148-49bd-b127-8042df63ded0')\n        })\n        .then(characteristic => {\n          return characteristic.writeValue(Uint8Array.of(1));\n        })\n        .then(_ => {\n          console.log('CMD has been written');\n        })\n        .catch(error => { console.log(error); });\n    }\n  render() {\n    return (\n    <div>\n      <div className=\"main-view\">\n\n        <div className=\"left side-menu\">\n\n          <div className=\"title-bar\">\n            E2 TCEP buffer 1.psmethod\n          </div>\n\n          <div className=\"tabs\">\n            <div className=\"tab active\">\n              Measurement \n            </div>\n            <div className=\"tab\">\n              Info\n            </div>\n            <div className=\"tab\">\n              Peaks\n            </div>\n          </div>\n          \n          <div className=\"content\">\n\n            <label className=\"option\"> Technique \n            <Dropdown className=\"input-text\" options={techniques} onChange={this._onSelect} value={techniques[0]} />      \n            </label>\n\n            <label className=\"option\"> Sample \n              <input type=\"text\" className=\"input-text\"/>\n            </label>\n\n            <label className=\"option\"> Sensor\n              <input type=\"text\" className=\"input-text\"/>\n            </label>\n\n            <label className=\"option\"> Current range\n              <div className=\"current-range\">\n\n                <div className=\"grey-box\">\n                  1 <br></br> nA\n                </div>\n\n\n                <div className=\"grey-box\">\n                  10 <br></br> nA\n                </div>\n\n\n                <div className=\"grey-box\">\n                  100 <br></br> nA\n                </div>\n\n\n                <div className=\"grey-box\">\n                  1 <br></br> uA\n                </div>\n\n\n                <div className=\"grey-box\">\n                  10 <br></br> uA\n                </div>\n\n\n                <div className=\"grey-box active\">\n                  100 <br></br> uA\n                </div>\n\n\n                <div className=\"grey-box\">\n                  1 <br></br> mA\n                </div>\n\n\n                <div className=\"grey-box\">\n                  10 <br></br> mA\n                      </div>\n\n\n                <div className=\"grey-box\">\n                  100 <br></br> mA\n                </div>\n\n              </div>\n            </label>\n\n            <div className=\"title\">\n               - Pretreatmet settings\n            </div>\n            <div className=\"section\">\n\n              <label className=\"option\">\n                E condition\n                <div>\n                  <input type=\"text\" className=\"input-text small\"/>\n                  V\n                </div>\n              </label>\n\n\n              <label className=\"option\">\n                t condition\n                <div>\n                  <input type=\"text\" className=\"input-text small\"/>\n                  s\n                </div>\n              </label>\n\n\n              <label className=\"option\">\n                E condition\n                <div>\n                  <input type=\"text\" className=\"input-text small\"/>\n                  V\n                </div>\n              </label>\n\n\n              <label className=\"option\">\n                t condition\n                <div>\n                  <input type=\"text\" className=\"input-text small\"/>\n                  s\n                </div>\n              </label>\n\n            </div>\n\n            <div className=\"title\">\n               - Square Wave settings\n            </div>\n            <div className=\"section\">\n\n              <label className=\"option\">\n                Frequency\n                <div>\n                  <input onChange={e => this.handleInputParameterChange(e)} value={this.state.frequency} name=\"frequency\" type=\"text\" className=\"input-text small\"/>\n                  Hz\n                </div>\n              </label>\n\n              <label className=\"option\">\n                Start Voltage\n                <div>\n                  <input onChange={e => this.handleInputParameterChange(e)}  value={this.state.startVoltage}  name=\"startVoltage\" type=\"text\" className=\"input-text small\"/>\n                  mV\n                </div>\n              </label>\n\n              <label className=\"option\">\n                Stop Voltage\n                <div>\n                  <input onChange={e => this.handleInputParameterChange(e)}   value={this.state.stopVoltage} name=\"stopVoltage\" type=\"text\" className=\"input-text small\"/>\n                  mV\n                </div>\n              </label>\n\n\n              <label className=\"option\">\n                Increment\n                <div>\n                  <input onChange={e => this.handleInputParameterChange(e)}   value={this.state.increment} name=\"increment\" type=\"text\" className=\"input-text small\"/>\n                  mV\n                </div>\n              </label>\n\n\n              <label className=\"option\">\n                Range\n                <div>\n                  <input onChange={e => this.handleInputParameterChange(e)}  value={this.state.range} name=\"startVoltage\" type=\"text\" className=\"input-text small\"/>\n                </div>\n              </label>\n\n\n              <label className=\"option\">\n                Data Rate\n                <div>\n                  <input onChange={e => this.handleInputParameterChange(e)}  value={this.state.dataRate} name=\"dataRate\" type=\"text\" className=\"input-text small\"/>\n                </div>\n              </label>\n\n              <label className=\"option\"> WE Selected\n                <div className=\"current-range\">\n\n                  <div className=\"grey-box\">\n                    1 <br></br> \n                  </div>\n\n                  <div className=\"grey-box\">\n                    2 <br></br> \n                  </div>\n\n\n                  <div className=\"grey-box\">\n                    3 <br></br> \n                  </div>\n\n\n                  <div className=\"grey-box\">\n                    4 <br></br> \n                  </div>\n\n\n                  <div className=\"grey-box\">\n                    5 <br></br> \n                  </div>\n\n\n                  <div className=\"grey-box\">\n                    6 <br></br> \n                  </div>\n\n\n                  <div className=\"grey-box\">\n                    7 <br></br> \n                  </div>\n                </div>\n              </label>\n\n              <div className=\"flex\">\n                <div className=\"button start-test\" onClick={this.runTest}> Start Test </div>\n              </div>\n\n\n            </div>\n\n          </div>\n        </div>\n\n\n        <div className=\"middle-view\">\n          <LineChart width={600} height={300} data={data}\n                margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n           <XAxis dataKey=\"name\"/>\n           <YAxis/>\n           <CartesianGrid strokeDasharray=\"3 3\"/>\n           <Tooltip/>\n           <Legend />\n           <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{r: 8}}/>\n           <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n          </LineChart>\n        </div>\n\n        <div className=\"side-menu\">\n        </div>\n\n      </div>\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}